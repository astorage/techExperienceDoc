kafka

topic和日志
topic：分区日志（partition） offset，有顺序的，保留期限可以配置，而不管是否消费。
kafka的性能和数据大小无关，长时间存储数据没有问题。

消费者之间不影响

分布式

leader分区处理读写数据，follower只是同步leader的数据，在leader宕机的时候来后补leader。 负载均衡的。


生产者

topic，可以发送消息到指定的partion，也可以根据一定的算法实现partition的负载均衡


消费者 

group consumer。如果一个group中有多个消费者，partition会均衡的分配给group中消费者

消费者均衡的消费partion中的数据，均衡的工作又kafka动态的维护。

topic消费是没有顺序的，partition消费是有顺序的。要topic也有顺序，可以用一个partition，以消费者实例。


保证

数据不丢失，数据写入和消费顺序


kafka作为消费系统

传统的消息系统  队列，发布订阅模式

消费者组中的消费者实例个数不能超过分区的数量 多余的消费者空闲。


kafka作为存储系统

消息中间件，可以作为消息的中间存储系统

kafka有数据备份，以便容错。而且会保证数据写入。

kafka使用磁盘结构，具有很好的扩展性。

可认为Kafka是一种高性能、低延迟、具备日志存储、备份和传播功能的分布式文件系统


kafka用作流处理

kafka stream可以做复杂的数据处理，然后输出到新的topic


设计

持久化
Kafka 对消息的存储和缓存严重依赖于文件系统

磁盘顺序读取写入，是磁盘的规律，操作系统使用预读，批量写。内存对磁盘的缓存，所有读写操作都是通过cache，pagecache

java，很消耗内存，堆中的数据增加，垃圾回收会很复杂也很慢。

使用pagecache，重启kafka，缓存依旧可用，如果使用程序缓存，需要重新构建缓存。pagecache和磁盘的数据一致性由操作系统维护，这样程序不用处理这方面的逻辑。


常量时间
持久化队列可以建立在简单的读取和向文件后追加两种操作之上，所有的操作复杂度都是O(1)，性能和数据大小完全分离开来


性能

大量的小型 I/O 操作，以及过多的字节拷贝


分组批量消息传送，分组批量读写磁盘，顺序读写，分担网络开销

字节拷贝，producer、broker、consumer使用相同的字节码格式

操作系统优化，  pagecache =》网络socket中， linux用sendfile， 这就是zero-copy


正常的流程有4次copy

1、磁盘 =》内核空间pagecache
2、内核空间pagecache =》用户空间缓存
3、用户空间缓存 =》 内核空间套接字缓存
4、内核套接字缓存 =》网络发送缓存


端到端批量压缩

压缩减少带宽，有利于远距离网络传输。批量压缩，压缩率更高。gzip、snappy、LZ4






设计思想

动机

