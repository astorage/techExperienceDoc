B树：二叉搜索树

1.所有非叶子结点至多拥有两个儿子（Left和Right）；
2.所有结点存储一个关键字；
3.非叶子结点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树；


平衡二叉树，性能最好。平衡算法很关键，是一种插入，删除节点的策略。


B-树：多路搜索树（不是二叉的）

1.定义任意非叶子结点最多只有M个儿子；且M>2；

2.根结点的儿子数为[2, M]；

3.除根结点以外的非叶子结点的儿子数为[M/2, M]；

4.每个结点存放至少M/2-1（取上整）和至多M-1个关键字；（至少2个关键字）

5.非叶子结点的关键字个数=指向儿子的指针个数-1；

6.非叶子结点的关键字：K[1], K[2], …, K[M-1]；且K[i] < K[i+1]；

7.非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的

  子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树；

8.所有叶子结点位于同一层；



B-树的特性：


1.关键字集合分布在整颗树中；

2.任何一个关键字出现且只出现在一个结点中；

3.搜索有可能在非叶子结点结束；（所有节点都存有相应的数据）

4.其搜索性能等价于在关键字全集内做一次二分查找；

5.自动层次控制；


所以B-树的性能总是等价于二分查找（与M值无关），也就没有B树平衡的问题；

由于M/2的限制，在插入结点时，如果结点已满，需要将结点分裂为两个各占

M/2的结点；删除结点时，需将两个不足M/2的兄弟结点合并；





B+树：B+树是B-树的变体，也是一种多路搜索树


1.其定义基本与B-树同，除了：

2.非叶子结点的子树指针与关键字个数相同；

3.非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）；

5.为所有叶子结点增加一个链指针；

6.所有关键字都在叶子结点出现；


B+树性能也等价于在关键字全集做一次二分查找；

B+的特性：

1.所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；

2.不可能在非叶子结点命中；（数据存放在叶子节点）

3.非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；

4.更适合文件索引系统；



聚集索引，非聚集索引。密集索引，稀疏索引


B*树 ：在B+树的基础上。在飞叶子节点，兄弟节点也有指针连接起来。



传统的平衡二叉树有很多：AVL树，红黑树。一般情况下性能很好。数据量太大，会多次访问磁盘，性能大大降低。

降低IO次数可以大幅度提升性能


https://www.jianshu.com/p/ace3cd6526c4

平衡二叉树的缺点

1、通过旋转来保持平衡，旋转是整棵树的操作，若只有部分数据加载到内存，是无法完成旋转的。
2、平衡二叉树的高度相对较大，log2n。这样逻辑上很近的节点实际上可能非常远，无法很好的利用磁盘预读（局部性原理），
   所以这类平衡二叉树在数据库和文件系统上就不太合适。


索引的效率依赖与磁盘 IO 的次数，快速索引需要有效的减少磁盘 IO 次数，如何快速索引呢？
索引的原理其实是不断的缩小查找范围，就如我们平时用字典查单词一样，先找首字母缩小范围，
再第二个字母等等。平衡二叉树是每次将范围分割为两个区间。为了更快，B-树每次将范围分割为多个区间，区间越多，
定位数据越快越精确。那么如果节点为区间范围，每个节点就较大了。所以新建节点时，
直接申请页大小的空间（磁盘存储单位是按 block 分的，一般为 512 Byte。
磁盘 IO 一次读取若干个 block，我们称为一页，具体大小和操作系统有关，一般为 4 k，8 k或 16 k），
计算机内存分配是按页对齐的，这样就实现了一个节点只需要一次 IO。










































