高并发场景下的数据修改（秒杀、红包雨等），都涉及到并发修改共享资源。

1、首先，对共享资源操作不加锁是不行的。这样会导致数据错乱，一般都会抢到，但是库存并没有变少的情况，会造成多抢的情况。

2、数据库乐观锁——修改的时候带上版本，可以保证正确性。数据版本被更新了，会有操作失败的情况，体现在业务端就是秒杀失败。

3、数据库悲观锁—— select from table for update 可以保证数据正确性。且不会出现失败的情况。性能会差一些。

4、java代码用锁控制查询和修改数据库的代码  synchronized一段代码。 这个性能就更差了。

5、java代码可重入锁锁定查询和修改数据库的代码 ReentrantLock 。这个性能跟synchronized 的情况一样，性能很差。

6、（推荐）redis来处理共享资源的操作。string类型的INCRBY DECRBY INCRBYFLOAT。hash的HINCRBY HINCRBYFLOAT。list、set也可以来做







